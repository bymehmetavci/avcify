package com.avcify.ws.announce;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.avcify.ws.announce.vm.AnnounceSubmitVM;
import com.avcify.ws.file.FileAttachment;
import com.avcify.ws.file.FileAttachmentRepository;
import com.avcify.ws.file.FileService;
import com.avcify.ws.user.User;
import com.avcify.ws.user.UserService;

@Service
public class AnnounceService {

	AnnounceRepository announceRepository;
	UserService userService;
	FileAttachmentRepository fileAttachmentRepository; 
	FileService fileService;

	public AnnounceService(AnnounceRepository announceRepository, UserService userService, FileAttachmentRepository fileAttachmentRepository
			,FileService fileService) {
		super();
		this.announceRepository = announceRepository;
		this.userService = userService;
		this.fileAttachmentRepository = fileAttachmentRepository;
		this.fileService = fileService;
	}

	public void save(AnnounceSubmitVM announceSubmitVM, User user) {
		Announce announce = new Announce();
		announce.setContent(announceSubmitVM.getContent());
		announce.setAddedDate(new Date());
		announce.setUser(user);
		announceRepository.save(announce);
		Optional<FileAttachment> optionalfileAttachment = fileAttachmentRepository.findById(announceSubmitVM.getAttachmentId());
		if(optionalfileAttachment.isPresent()) {
			FileAttachment fileAttachment = optionalfileAttachment.get();
			fileAttachment.setAnnounce(announce);
			fileAttachmentRepository.save(fileAttachment);
		}
	}

	public Page<Announce> getAnnouncements(Pageable page) {
		return announceRepository.findAll(page);
	}

	public Page<Announce> getAnnouncementsOfUser(String username, Pageable page) {
		User inDB = userService.getByUsername(username);
		return announceRepository.findByUser(inDB, page);
	}

	public Page<Announce> getOldAnnouncements(long id, String username, Pageable page) {
		/**
		 * Not using with specification.
		if(username != null) {
			User inDB = userService.getByUsername(username);
			return announceRepository.findByIdLessThanAndUser(id, inDB, page);
		}
		return announceRepository.findByIdLessThan(id, page); 
		*/
		Specification<Announce> specification = idLessThan(id);
		if(username != null) {
			User inDB = userService.getByUsername(username);
			specification = specification.and(userIs(inDB));
		}
		return announceRepository.findAll(specification, page);
	}

	public long getNewAnnouncementsCount(long id, String username) {
		Specification<Announce> specification = idGreaterThan(id);
		if(username != null) {
			User inDB = userService.getByUsername(username);
			specification = specification.and(userIs(inDB));
		}
		return announceRepository.count(specification);
	}

	public List<Announce> getNewAnnouncements(long id, String username, Sort sort) {
		/**
		 * Not using with specification.
		if(username != null) {
			User inDB = userService.getByUsername(username);
			return announceRepository.findByIdGreaterThanAndUser(id, inDB, sort);
		}
		return announceRepository.findByIdGreaterThan(id, sort);
		*/
		Specification<Announce> specification = idGreaterThan(id);
		if(username != null) {
			User inDB = userService.getByUsername(username);
			specification = specification.and(userIs(inDB));
		}
		return announceRepository.findAll(specification, sort);
	}
	
	Specification<Announce> idLessThan(long id) {
		return (root, query, criteriaBuilder) -> {
			return criteriaBuilder.lessThan(root.get("id"), id);
		};
	}
	
	Specification<Announce> userIs(User user) {
		return (root, query, criteriaBuilder) -> {
			return criteriaBuilder.equal(root.get("user"), user);
		};
	}
	
	Specification<Announce> idGreaterThan(long id) {
		return (root, query, criteriaBuilder) -> {
			return criteriaBuilder.greaterThan(root.get("id"), id);
		};
	}

	public void delete(long id) {
		Announce inDB = announceRepository.getOne(id);
		if(inDB.getFileAttachment() != null) {
			String fileName = inDB.getFileAttachment().getName();
			fileService.deleteAttachmentFile(fileName);
		}
		announceRepository.deleteById(id);
	}
	
	public void deleteAnnouncementsOfUser(String username) {
		User inDB = userService.getByUsername(username);
		Specification<Announce> userOwned = userIs(inDB);
		List<Announce> announcesToBeRemoved = announceRepository.findAll(userOwned);
		announceRepository.deleteAll(announcesToBeRemoved);
	}
}
